package com.example.geocoder;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.location.Geocoder;
import android.net.Uri;
import android.os.Bundle;
import android.widget.Button;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {
    ArrayList<String> fileRows;
    ArrayList<Location> locations = new ArrayList<>();
    LocationAdapter locationAdapter;
    Button btnReadFile;
    Button btnFindAddress;
    RecyclerView rvLocations;

    @Override
    protected void onResume() {
        super.onResume();
        // When the user returns to the main activity re-query the database
        // to ensure the most up to date data is displayed. The adapter gets notified
        // to re-render the RecyclerView.
        DBHelper dbHelper = new DBHelper(getApplicationContext());
        locations.clear();
        locations.addAll(dbHelper.getAllLocations());
        locationAdapter.notifyDataSetChanged();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Set RecyclerView and bind adapter to locations
        RecyclerView rvLocations = findViewById(R.id.rvLocations);
        rvLocations.setLayoutManager(new LinearLayoutManager(this));
        locationAdapter = new LocationAdapter(getApplicationContext(), locations);
        rvLocations.setAdapter(locationAdapter);

        // Button to read file and load data
        btnReadFile = findViewById(R.id.btnReadFile);
        btnReadFile.setOnClickListener(v -> {
            ArrayList<Location> fileLocations = new ArrayList<>();
            fileRows = readFile("addresses.txt");
            for (String row : fileRows) {
                fileLocations.add(new Location(row));
            }
            // instantiate geocoder to replace the addresses pulled from the file
            // in the previous step and replace them with the geocoder queried addresses
            // using the provided lat and long data.
            Geocoder geocoder = new Geocoder(this, Locale.getDefault());
            for (Location loc : fileLocations) {
                try {
                    // lat and long is provided as a double to get the Address object, and the top line is returned which is overwriting the text file provided address.
                    loc.setAddress(geocoder.getFromLocation(Double.parseDouble(loc.latitude), Double.parseDouble(loc.longitude), 1).get(0).getAddressLine(0));
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            // Once all addresses are updated, the locations are all persisted and the database
            // is queried to get all the locations again with the id's pre-populated this time.
            // The id's are needed to allow for update functionality to uniquely identify
            // each location by the primary key that was generated by the database, which is
            // guaranteed to be unique.
            DBHelper dbHelper = new DBHelper(getApplicationContext());
            dbHelper.persistLocations(fileLocations);
            locations.clear();
            locations.addAll(dbHelper.getAllLocations());
            locationAdapter.notifyDataSetChanged();
        });

        // Button to find address creates an intent and starts the Edit Activity
        // without passing in an id as an extra, thus signalling to the Edit Activity
        // that this is not updating an existing location.
        btnFindAddress = findViewById(R.id.btnFindAddress);
        btnFindAddress.setOnClickListener(v -> {
            Intent intent = new Intent(this, EditActivity.class);
            this.startActivity(intent);
        });
    }

    private ArrayList<String> readFile(String file) {
        // Read the addresses.txt file located in the assets folder line by line and return each row.
        // Each returned row is added to the ArrayList<String> to be easily handled later.
        ArrayList<String> rows = new ArrayList<>();
        BufferedReader reader = null;
        try {
            InputStream inputStream = getAssets().open(file);
            reader = new BufferedReader(new InputStreamReader(inputStream));
            String row;
            while ((row = reader.readLine()) != null) {
                rows.add(row);
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return rows;
    }

}